// Mocks generated by Mockito 5.4.4 from annotations
// in expense_tracker/test/presentation/expense_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i3;
import 'package:expense_tracker/core/utils/execptions.dart' as _i9;
import 'package:expense_tracker/features/expense/domain/entities/expense_entity.dart'
    as _i10;
import 'package:expense_tracker/features/expense/domain/repositories/expense_repository.dart'
    as _i2;
import 'package:expense_tracker/features/expense/domain/use_case/add_expense.dart'
    as _i4;
import 'package:expense_tracker/features/expense/domain/use_case/delete_expense.dart'
    as _i5;
import 'package:expense_tracker/features/expense/domain/use_case/get_expenses.dart'
    as _i6;
import 'package:expense_tracker/features/expense/presentation/bloc/expense_bloc.dart'
    as _i11;
import 'package:expense_tracker/features/expense/presentation/bloc/expense_event.dart'
    as _i12;
import 'package:expense_tracker/features/expense/presentation/bloc/expense_state.dart'
    as _i7;
import 'package:flutter_bloc/flutter_bloc.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExpenseRepository_0 extends _i1.SmartFake
    implements _i2.ExpenseRepository {
  _FakeExpenseRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddExpense_2 extends _i1.SmartFake implements _i4.AddExpense {
  _FakeAddExpense_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteExpense_3 extends _i1.SmartFake implements _i5.DeleteExpense {
  _FakeDeleteExpense_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetExpenses_4 extends _i1.SmartFake implements _i6.GetExpenses {
  _FakeGetExpenses_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExpenseState_5 extends _i1.SmartFake implements _i7.ExpenseState {
  _FakeExpenseState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddExpense].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExpense extends _i1.Mock implements _i4.AddExpense {
  MockAddExpense() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeExpenseRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ExpenseRepository);

  @override
  _i8.Future<_i3.Either<_i9.Failure, _i10.ExpenseEntity>> call(
          _i10.ExpenseEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, _i10.ExpenseEntity>>.value(
                _FakeEither_1<_i9.Failure, _i10.ExpenseEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, _i10.ExpenseEntity>>);
}

/// A class which mocks [DeleteExpense].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteExpense extends _i1.Mock implements _i5.DeleteExpense {
  MockDeleteExpense() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeExpenseRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ExpenseRepository);

  @override
  _i8.Future<_i3.Either<_i9.Failure, bool>> call(_i10.ExpenseEntity? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i8.Future<_i3.Either<_i9.Failure, bool>>.value(
            _FakeEither_1<_i9.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, bool>>);
}

/// A class which mocks [GetExpenses].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetExpenses extends _i1.Mock implements _i6.GetExpenses {
  MockGetExpenses() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeExpenseRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.ExpenseRepository);

  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.ExpenseEntity>>> call(
          DateTime? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i8.Future<_i3.Either<_i9.Failure, List<_i10.ExpenseEntity>>>.value(
                _FakeEither_1<_i9.Failure, List<_i10.ExpenseEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i8.Future<_i3.Either<_i9.Failure, List<_i10.ExpenseEntity>>>);
}

/// A class which mocks [ExpenseBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseBloc extends _i1.Mock implements _i11.ExpenseBloc {
  MockExpenseBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AddExpense get addExpense => (super.noSuchMethod(
        Invocation.getter(#addExpense),
        returnValue: _FakeAddExpense_2(
          this,
          Invocation.getter(#addExpense),
        ),
      ) as _i4.AddExpense);

  @override
  _i5.DeleteExpense get deleteExpense => (super.noSuchMethod(
        Invocation.getter(#deleteExpense),
        returnValue: _FakeDeleteExpense_3(
          this,
          Invocation.getter(#deleteExpense),
        ),
      ) as _i5.DeleteExpense);

  @override
  _i6.GetExpenses get getExpenses => (super.noSuchMethod(
        Invocation.getter(#getExpenses),
        returnValue: _FakeGetExpenses_4(
          this,
          Invocation.getter(#getExpenses),
        ),
      ) as _i6.GetExpenses);

  @override
  _i7.ExpenseState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeExpenseState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.ExpenseState);

  @override
  _i8.Stream<_i7.ExpenseState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i7.ExpenseState>.empty(),
      ) as _i8.Stream<_i7.ExpenseState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void add(_i12.ExpenseEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i12.ExpenseEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i7.ExpenseState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i12.ExpenseEvent>(
    _i13.EventHandler<E, _i7.ExpenseState>? handler, {
    _i13.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i13.Transition<_i12.ExpenseEvent, _i7.ExpenseState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void onChange(_i13.Change<_i7.ExpenseState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
